name: Deploy Tagged Version
on:
  push:
    tags:
      - '*'
env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_ILIOS_DEPLOYMENT_WEBHOOK_URL }}

jobs:
  tags:
    runs-on: ubuntu-latest
    name: Extract Semvar Tags
    outputs:
      major: ${{ steps.tag.outputs.major }}
      minor: ${{ steps.tag.outputs.minor }}
      patch: ${{ steps.tag.outputs.patch }}
    steps:
    - id: tag
      run: |
        echo ${GITHUB_REF}
        MAJOR_VERSION=$(echo $GITHUB_REF | sed -rn 's#^refs/tags/(v3)\.([0-9]+)\.([0-9]+)$#\1#p')
        echo ${MAJOR_VERSION}
        echo "major=${MAJOR_VERSION}" >> "$GITHUB_OUTPUT"
        MINOR_VERSION=$(echo $GITHUB_REF | sed -rn 's#^refs/tags/(v3)\.([0-9]+)\.([0-9]+)$#\1.\2#p')
        echo ${MINOR_VERSION}
        echo "minor=${MINOR_VERSION}" >> "$GITHUB_OUTPUT"
        PATCH_VERSION=$(echo $GITHUB_REF | sed -rn 's#^refs/tags/(v3)\.([0-9]+)\.([0-9]+)$#\1.\2.\3#p')
        echo ${PATCH_VERSION}
        echo "patch=${PATCH_VERSION}" >> "$GITHUB_OUTPUT"
  deploy-docker-containers:
    needs: tags
    name: Docker Registry (${{needs.tags.outputs.major}},${{needs.tags.outputs.minor}},${{needs.tags.outputs.patch}})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - php-apache
          - nginx
          - fpm
          - fpm-dev
          - admin
          - update-frontend
          - consume-messages
          - mysql
          - mysql-demo
          - opensearch
          - redis
          - tika
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/amd64,linux/arm64
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: v0.19.3
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: zorgbort
        password: ${{ secrets.ZORGBORT_DOCKER_TOKEN }}
    - name: ${{ matrix.image }} to Docker Registry
      uses: docker/build-push-action@v6
      with:
        tags: ilios/${{ matrix.image }}:${{needs.tags.outputs.major}},ilios/${{ matrix.image }}:${{needs.tags.outputs.minor}},ilios/${{ matrix.image }}:${{needs.tags.outputs.patch}}
        target: ${{ matrix.image }}
        push: true
        provenance: false #https://github.com/gabrieldemarmiesse/python-on-whales/issues/407
        platforms: linux/amd64,linux/arm64
    - uses: act10ns/slack@v2.1.0
      with:
        status: ${{ job.status }}
        message: Failed to deploy {{ env.GITHUB_SERVER_URL }}/{{ env.GITHUB_REPOSITORY }}/actions/runs/{{ env.GITHUB_RUN_ID }}
      if: failure()

  sentry-release:
    name: Create Sentry Release
    needs: tags
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Sentry CLI
        run: npm install -g @sentry/cli
      - name: Create a Sentry.io release
        run: |
          # Create new Sentry release
          export SENTRY_RELEASE=${{needs.tags.outputs.patch}}
          sentry-cli releases new $SENTRY_RELEASE
          sentry-cli releases set-commits --auto $SENTRY_RELEASE
          sentry-cli releases finalize $SENTRY_RELEASE
        env:
          SENTRY_ORG: ilios
          SENTRY_PROJECT: api
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - uses: act10ns/slack@v2
        if: failure()
        with:
          status: ${{ job.status }}
          message: Sentry Deploy Failed {{ env.GITHUB_SERVER_URL }}/{{ env.GITHUB_REPOSITORY }}/actions/runs/{{ env.GITHUB_RUN_ID }}
