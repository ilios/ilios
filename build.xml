<?xml version="1.0" encoding="UTF-8"?>
<!-- Phing buildfile for Ilios -->
<!--
    Usage:

    1. Copy the /build.properties.sample file and configure the copied file accordingly.
    2. Execute phing by providing the path to the property file (mandatory) and the name of the build target (optional).
       If no build target is provided, the default "build-and-deploy" target will be assumed and executed.

        Example:
            $ cp build.properties.sample ~/ilios-stage.properties
            $ phing -propertyfile ~/iios-stage.properties build

    3. Certain sub-targets may be omitted by setting "skip" properties.

        'skip-prompt' ... if set to "true" then the user will not be prompted for comfirmation before code is deployed.
        'skip-setup-zero-user' ... if set to "true" then no "zero-user" account will be created during db installation.
        'skip-db-backup' ... 'if set to "true" then no db backup is perform prior to a db update.


    Tips:

    1. You may want to keep multiple property files around, one for each environment (dev/stage/prod).
    2. Run the "deploy" and "build-and-deploy" targets with elevated privileges ('sudo') if your deployment directory is owned by 'root'

        Example:
            $ sudo phing -propertyfile build.properties build-and-deploy

    3. You can directly provide the package bundle as command line argument "packagefilepath" to the "deploy" target

        Example:
            $ phing -propertyfile build.properties -Dpackagefilepath=/path/to/your/ilios/package.tar.gz deploy

    Todo:
        PHPDoc integration

    See:
        http://www.phing.info/docs/guide/stable/
-->
<project name="ilios" basedir="." default="build-and-deploy">

    <property name="webdir" value="${project.basedir}/web" override="true" />

    <!-- capture current date/time info -->
    <php function="time" returnProperty="now" />
    <tstamp>
        <format property="DSTAMP" pattern="%F" />
        <format property="TSTAMP" pattern="%H-%M-%S" />
        <format property="TODAY" pattern="%c" locale="en_US" />
    </tstamp>

    <!-- Fileset for all source files -->
    <fileset dir="${webdir}" id="webfiles">
        <exclude name="tmp_uploads/" />
        <exclude name="learning_materials/" />
        <exclude name="application/logs/" />
        <exclude name="application/cache/" />
    </fileset>

    <!-- ============================================ -->
    <!-- Target: build-and-deploy (DEFAULT)           -->
    <!-- ============================================ -->
    <target name="build-and-deploy" depends="build,deploy"
            description="builds and deploys the application">
    </target>


    <!-- ============================================ -->
    <!-- Target: build                                -->
    <!-- ============================================ -->
    <target name="build" depends="copy,configure,package"
            description="configures and bundles the code base for deployment">
    </target>


    <!-- ============================================ -->
    <!-- Target: copy                                 -->
    <!-- ============================================ -->
    <target name="copy"
        description="copies the files from the /web directory to the build directory">
        <!-- sanity check: verify that build dir has been specified -->
        <if>
            <not>
                <isset property="builddir" />
            </not>
            <then>
                <fail message="No build directory was specified." />
            </then>
        </if>
        <!-- delete old build directory if it already exists-->
        <if>
            <available file="${builddir}" type="dir" />
            <then>
                <delete dir="${builddir}" includeemptydirs="true" failonerror="true" />
            </then>
        </if>
        <!-- re-create build directory -->
        <mkdir dir="${builddir}" />
        <!-- copy codebase to build directory -->
        <copy todir="${builddir}">
            <fileset refid="webfiles" />
        </copy>
        <!-- create log, cache and upload directories -->
        <mkdir dir="${builddir}/tmp_uploads" />
        <mkdir dir="${builddir}/application/logs" />
        <mkdir dir="${builddir}/application/cache" />
        <mkdir dir="${builddir}/learning_materials" />
        <!-- copy index files and .htaccess files to log and cache directories -->
        <copy todir="${builddir}/application/cache">
            <filelist dir="${webdir}/application/cache" files="index.html,.htaccess"/>
        </copy>
        <copy todir="${builddir}/application/logs">
            <filelist dir="${webdir}/application/logs" files="index.html" />
        </copy>
        <!-- drop .htaccess files into the upload dirs -->
        <touch file="${builddir}/tmp_uploads/.htaccess" />
        <append destFile="${builddir}/tmp_uploads/.htaccess"
                text="Options -Indexes" />
        <touch file="${builddir}/learning_materials/.htaccess" />
        <append destFile="${builddir}/learning_materials/.htaccess"
                text="Options -Indexes" />
        <!-- explicity set file and directory permissions -->
        <exec command="find ${builddir} -type d -exec chmod 755 {} \;" escape="false" />
        <exec command="find ${builddir} -type f -exec chmod 644 {} \;" escape="false" />
    </target>

    <!-- ============================================ -->
    <!-- Target: configure                            -->
    <!-- ============================================ -->
    <target name="configure"
        description="(over)writes configuration parameters to various files of the application">
        <!-- copy/rename default.config.php to config.php and substitute placeholder token -->
        <copy file="${builddir}/application/config/default.config.php"
              tofile="${builddir}/application/config/config.php"
              overwrite="true">
            <filterchain>
                <replacetokens begintoken="%%" endtoken="%%">
                    <token key="ENCRYPTION_KEY" value="${encryption_key}" />
                </replacetokens>
            </filterchain>
        </copy>
        <!-- copy/rename default.database.php to database.php and substitute placeholder token -->
        <copy file="${builddir}/application/config/default.database.php"
              tofile="${builddir}/application/config/database.php"
              overwrite="true">
            <filterchain>
                <replacetokens begintoken="%%" endtoken="%%">
                    <token key="DBGROUP" value="${db.group}" />
                    <token key="DBHOSTNAME" value="${db.hostname}" />
                    <token key="DBUSERNAME" value="${db.username}" />
                    <token key="DBNAME" value="${db.name}" />
                    <token key="DBPASSWORD" value="${db.password}" />
                </replacetokens>
            </filterchain>
        </copy>
        <!-- copy/rename default.ilios.php to ilios.php and substitute placeholder token -->
        <copy file="${builddir}/application/config/default.ilios.php"
              tofile="${builddir}/application/config/ilios.php"
              overwrite="true">
            <filterchain>
                <replacetokens begintoken="%%" endtoken="%%">
                    <token key="ILIOS_INSTITUTION_NAME" value="${institution_name}" />
                    <token key="ILIOS_REVISION" value="${now}" />
                    <token key="USERSYNC_LDAP_HOSTNAME" value="${tasks.user_sync.ldap.hostname}" />
                    <token key="USERSYNC_LDAP_BINDDN" value="${tasks.user_sync.ldap.binddn}" />
                    <token key="USERSYNC_LDAP_PASSWORD" value="${tasks.user_sync.ldap.password}" />
                </replacetokens>
            </filterchain>
        </copy>
        <!-- copy/rename default.index.php to index.php and substitute placeholder token -->
        <copy file="${builddir}/default.index.php"
              tofile="${builddir}/index.php"
              overwrite="true">
            <filterchain>
                <replacetokens begintoken="%%" endtoken="%%">
                    <token key="ILIOS_REVISION" value="${now}" />
                </replacetokens>
            </filterchain>
        </copy>
        <!-- append configuration overwites to application/config/ilios.php -->
        <append destFile="${builddir}/application/config/ilios.php"
                text="${line.separator}//${line.separator}// Configuration overwrites below were added by the automated build process on ${TODAY} ${line.separator}//${line.separator}"/>
        <if>
            <isset property="ilios_idle_page_timeout" />
            <then>
                <append destFile="${builddir}/application/config/ilios.php"
                        text="$config['ilios_idle_page_timeout'] = ${ilios_idle_page_timeout};${line.separator}" />
            </then>
        </if>
        <if>
            <isset property="ilios_authentication" />
            <then>
                <append destFile="${builddir}/application/config/ilios.php"
                        text="$config['ilios_authentication'] = '${ilios_authentication}';${line.separator}" />
            </then>
        </if>
        <if>
            <isset property="visual_alert_threshold_in_days" />
            <then>
                <append destFile="${builddir}/application/config/ilios.php"
                        text="$config['visual_alert_threshold_in_days'] = ${visual_alert_threshold_in_days};${line.separator}" />
            </then>
        </if>
        <if>
            <isset property="tasks.change_alerts.enabled" />
            <then>
                <append destFile="${builddir}/application/config/ilios.php"
                        text="$config['tasks']['change_alerts']['enabled'] = ${tasks.change_alerts.enabled};${line.separator}" />
            </then>
        </if>
        <if>
            <isset property="tasks.teaching_reminders.enabled" />
            <then>
                <append destFile="${builddir}/application/config/ilios.php"
                        text="$config['tasks']['teaching_reminders']['enabled'] = ${tasks.teaching_reminders.enabled};${line.separator}" />
            </then>
        </if>
        <if>
            <isset property="tasks.user_sync.enabled" />
            <then>
                <append destFile="${builddir}/application/config/ilios.php"
                        text="$config['tasks']['user_sync']['enabled'] = ${tasks.user_sync.enabled};${line.separator}" />
            </then>
        </if>
        <if>
            <isset property="tasks.enrollment_export.enabled" />
            <then>
                <append destFile="${builddir}/application/config/ilios.php"
                        text="$config['tasks']['enrollment_export']['enabled'] = ${tasks.enrollment_export.enabled};${line.separator}" />
            </then>
        </if>
    </target>

    <!-- ============================================ -->
    <!-- Target: package                              -->
    <!-- ============================================ -->
    <target name="package" depends="configure"
            description="tars up the build directory for deployment">
        <!-- sanity check: verify that package dir has been specified -->
        <if>
            <not>
                <isset property="packagedir" />
            </not>
            <then>
                <fail message="No package directory was specified." />
            </then>
        </if>
        <!-- capture the file name and full file path of the deployment bundle for later use -->
        <property name="packagefile" value="${phing.project.name}_${DSTAMP}_${TSTAMP}.tar.gz" />
        <property name="packagefilepath" value="${packagedir}/${packagefile}" />
        <mkdir dir="${packagedir}" />
        <tar destfile="${packagefilepath}" includeemptydirs="true" compression="gzip">
             <fileset dir="${builddir}">
                <!-- do not include the config file templates -->
                <exclude name="application/config/default.config.php" />
                <exclude name="application/config/default.database.php" />
                <exclude name="application/config/default.ilios.php" />
                <exclude name="default.index.php" />
            </fileset>
        </tar>
        <echo>Deployment DB: ${db.name}</echo>
    </target>

    <!-- ============================================ -->
    <!-- Target: cleanup                              -->
    <!-- ============================================ -->
    <target name="cleanup"
            description="removes the build and package directory">
        <delete dir="${builddir}" includeemptydirs="true" failonerror="true" />
        <delete dir="${packagedir}" includeemptydirs="true" failonerror="true" />
    </target>

    <!-- ============================================ -->
    <!-- Target: deploy-prepare                       -->
    <!-- ============================================ -->
    <target name="deploy-prepare"
            description="pre-deployment input validation and user confirmation">
        <!-- sanity check: verify that deployment dir has been specified -->
        <if>
            <not>
                <isset property="deploydir" />
            </not>
            <then>
                <fail message="No deployment directory was specified." />
            </then>
        </if>
        <!-- verify that the given deployment bundle exists. if not abort mission -->
        <if>
            <not>
                <available file="${packagefilepath}" type="file" />
            </not>
            <then>
                <fail message="Deployment bundle ${packagefilepath} not found." />
            </then>
        </if>

        <!--
            Check if build property "skip-prompt" exists and equals "true".
            If so, then skip user prompt.
            Otherwise, solicit confirmation from the user before proceeding.
        -->
        <if>
            <not>
                <and>
                    <isset property="skip-prompt" />
                    <istrue value="${skip-prompt}" />
                </and>
            </not>
            <then>
                <input propertyname="proceed" defaultValue="n" promptChar="?" validArgs="Y,n">
                    Deploy Ilios-bundle ${packagefilepath} to "${deploydir}" directory and "${db.name}" database
                </input>
                <if>
                    <not>
                        <equals arg1="${proceed}" arg2="Y" />
                    </not>
                    <then>
                        <fail message="Aborting deployment." />
                    </then>
                </if>
            </then>
        </if>
    </target>
    <!-- ============================================ -->
    <!-- Target: deploy                               -->
    <!-- ============================================ -->
    <target name="deploy" depends="deploy-prepare,backup"
            description="(re)deploys the code to a given destination directory and installs/updates the database.">
        <property name="db_exists" value="true" />
        <!-- either create a deployment directory (if non-existent), or gut the existing one -->
        <if>
            <available file="${deploydir}" type="dir" />
            <then>
                <delete includeemptydirs="true" failonerror="true">
                    <fileset dir="${deploydir}">
                        <!-- keep log files and user uploads -->
                        <exclude name="tmp_uploads/**" />
                        <exclude name="learning_materials/**" />
                        <exclude name="application/logs/**" />
                    </fileset>
                </delete>
            </then>
            <else>
                <mkdir dir="${deploydir}" />
            </else>
        </if>
        <!-- extract the deployment bundle into the deployment directory -->
        <untar file="${packagefilepath}" todir="${deploydir}" forceExtract="false" />
        <!-- change file ownership on upload-, log- and cache-directories -->
        <chown file="${deploydir}/tmp_uploads" user="${webuser}" group="${webgroup}" />
        <chown file="${deploydir}/learning_materials" user="${webuser}" group="${webgroup}" />
        <chown file="${deploydir}/application/logs" user="${webuser}" group="${webgroup}" />
        <chown file="${deploydir}/application/cache" user="${webuser}" group="${webgroup}" />
        <!-- hokey way of checking if the database already exists or not -->
        <trycatch property="db_error">
            <try>
                <!-- attempt to connect and run a query against the given database -->
                <pdosqlexec url="mysql:host=${db.hostname};dbname=${db.name}"
                    userid="${db.username}" password="${db.password}">
                    SELECT true;
                </pdosqlexec>
            </try>
            <catch>
                <!--
                    DB error.
                    Assume that the specified database does not exist.
                    Toggle the "db-exists" flag to FALSE.
                    TODO:
                    parse the db error message if it indeed contains "Unknown Database"
                    or perhaps a specific error code that indicates the same failure.
                -->
                <echo msg="${db_error}" />
                <property name="db_exists" value="false" override="true" />
            </catch>
        </trycatch>
        <!-- update or install db -->
        <if>
            <istrue value="${db_exists}" />
            <then>
                 <phingcall target="db-update" />
            </then>
            <else>
                <phingcall target="db-install" />
            </else>
        </if>
    </target>

    <!-- ============================================ -->
    <!-- Target: backup                               -->
    <!-- ============================================ -->
    <target name="backup"
            description="backs-up the deployment directory (if existent)">
        <if>
            <available file="${deploydir}" type="dir" />
            <then>
                <!-- sanity check: verify that backup dir has been specified -->
                <if>
                    <not>
                        <isset property="backupdir" />
                    </not>
                    <then>
                        <fail message="No backupdir directory was specified." />
                    </then>
                </if>
                <property name="backupfile"
                          value="${backupdir}/${phing.project.name}_backup_${DSTAMP}_${TSTAMP}.tar.gz" />
                <mkdir dir="${backupdir}" />
                <tar destfile="${backupfile}" includeemptydirs="true" compression="gzip">
                    <fileset dir="${deploydir}">
                    <!-- exclude log-, cache- and user-upload-files from backup -->
                        <exclude name="tmp_uploads/" />
                        <exclude name="learning_materials/" />
                        <exclude name="application/logs/" />
                        <exclude name="application/cache/" />
                    </fileset>
                </tar>
            </then>
            <else>
                <echo>No pre-existing deployment dir "${deploydir}" found, skipping backup.</echo>
            </else>
        </if>
    </target>

    <!-- ============================================ -->
    <!-- Target: db-update                            -->
    <!-- ============================================ -->
    <target name="db-update" description="Updates the Ilios database.">
        <!-- back up database unless indicated otherwise -->
        <if>
            <not>
                <and>
                    <isset property="skip-db-backup" />
                    <istrue value="${skip-db-backup}" />
                </and>
            </not>
            <then>
                <phingcall target="db-backup" />
            </then>
        </if>
        <exec command="php ilios.php migrate" dir="${deploydir}" logoutput="true"/>
    </target>

    <!-- ============================================ -->
    <!-- Target: db-install                           -->
    <!-- ============================================ -->
    <target name="db-install" description="Installs the Ilios database.">
        <property name="db_install_dir" value="${project.basedir}/database/install" />
        <property name="db_install_file_template" value="${db_install_dir}/make_new_ilios_database.sql" />
        <property name="db_install_file" value="${db_install_dir}/tmp.make_new_ilios_database.sql" />
        <property name="mysql_conf_file" value="${db_install_dir}/tmp.my.cnf" />

        <copy file="${db_install_file_template}"
              tofile="${db_install_file}"
              overwrite="true">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="XXXXXX" replace="${db.name}" />
                </replaceregexp>
            </filterchain>
        </copy>

        <!-- create a temp config file to store the db password in. -->
        <phingcall target="create-mysql-conf-file">
            <property name="mysql_conf_file" value="${mysql_conf_file}" />
        </phingcall>
        <!-- create db schema and import default data -->
        <trycatch>
            <try>
                <exec command="mysql --defaults-extra-file=${mysql_conf_file}  -u ${db.username} -h ${db.hostname} &lt; ${db_install_file}"
                    dir="${db_install_dir}" checkreturn="true" logoutput="true" />
            </try>
            <finally>
                <!-- clean up -->
                <delete file="${mysql_conf_file}" />
                <delete file="${db_install_file}" />
            </finally>
        </trycatch>
        <!-- invoke zero user setup target unless indicated otherwise -->
        <if>
            <not>
                <and>
                    <isset property="skip-setup-zero-user" />
                    <istrue value="${skip-setup-zero-user}" />
                </and>
            </not>
            <then>
                <phingcall target="setup-zero-user" />
            </then>
        </if>
    </target>

    <!-- ============================================ -->
    <!-- Target: db-backup                            -->
    <!-- ============================================ -->
    <target name="db-backup" description="Backs up the database.">
        <property name="mysql_conf_file" value="${db_backupdir}/tmp.my.cnf" />
        <property name="db_backup_file" value="${db_backupdir}/${phing.project.name}_db_backup_${DSTAMP}_${TSTAMP}.sql.gz" />

        <!-- create the backup dir on demand -->
        <if>
            <not>
                <available file="${db_backupdir}" type="dir" />
            </not>
            <then>
                <mkdir dir="${db_backupdir}" />
            </then>
        </if>
        <!-- create a temp config file to store the db password in. -->
        <phingcall target="create-mysql-conf-file">
            <property name="mysql_conf_file" value="${mysql_conf_file}" />
        </phingcall>
        <!-- dump out the database and compress the output -->
        <trycatch>
            <try>
                <exec command="mysqldump --defaults-extra-file=${mysql_conf_file}  -u ${db.username} -h ${db.hostname} --default-character-set=latin1 -R ${db.name} | gzip -c | cat &gt; ${db_backup_file}" checkreturn="true" logoutput="true" />
            </try>
            <finally>
                <delete file="${mysql_conf_file}" />
            </finally>
        </trycatch>
    </target>

    <!-- ============================================ -->
    <!-- Target: create-mysql-conf-file               -->
    <!-- ============================================ -->
    <target name="create-mysql-conf-file"
        description="Creates a temporary config file that can be used to store credentials for mysql/mysqldump calls.">
        <!--
            How and why to use a temp. conf file instead of passing the password as command line argument.
            @link http://dev.mysql.com/doc/refman/5.5/en/password-security-user.htm
            @link http://dev.mysql.com/doc/refman/5.5/en/option-files.html
        -->
        <if>
            <available file="${mysql_conf_file}" />
            <then>
                <delete file="${mysql_conf_file}" />
            </then>
        </if>
        <touch file="${mysql_conf_file}" />
        <chmod file="${mysql_conf_file}" mode="0600" />
        <append destFile="${mysql_conf_file}">
            [client]
            password="${db.password}"
        </append>
    </target>

    <!-- ============================================ -->
    <!-- Target: setup-zero-user                      -->
    <!-- ============================================ -->
    <target name="setup-zero-user" description="Creates a default user account (the 'zero-user') in the database.">
        <!--
            This is essentially replicating the 'database/install/install_zero_user.sh' shell-script.
            TODO: See if this target can share some code with the corresponding shell-script. DRY!
        -->
        <!-- generate a password hash -->
        <php function="hash" returnProperty="password_hash">
            <param value="sha256" />
            <param value="${db_install.zero_user.password}" />
        </php>
        <!--
            Lame-o output escaping, since neither PDO's prepared statements
            nor mysqli_real_escape_string() are available at this point to phing.
            At least this will take care of quotes.
        -->
        <php function="addslashes" returnProperty="escaped_first_name">
            <param value="${db_install.zero_user.first_name}" />
        </php>
        <php function="addslashes" returnProperty="escaped_last_name">
            <param value="${db_install.zero_user.last_name}" />
        </php>
        <php function="addslashes" returnProperty="escaped_email">
            <param value="${db_install.zero_user.email}" />
        </php>
            <php function="addslashes" returnProperty="escaped_login">
            <param value="${db_install.zero_user.login}" />
        </php>
        <php function="intval" returnProperty="escaped_school_id">
            <param value="${db_install.zero_user.school_id}" />
            <param value="10" />
        </php>
        <!-- run the SQL transaction that creates the zero user -->
        <pdosqlexec url="mysql:host=${db.hostname};dbname=${db.name}"
            userid="${db.username}" password="${db.password}">
            <transaction>
                INSERT INTO user (user_id, first_name, middle_name, last_name, email, primary_school_id, added_via_ilios, enabled, examined, user_sync_ignore) VALUES (1, '${escaped_last_name}', '', '${escaped_first_name}', '${escaped_email}', ${escaped_school_id}, 1, 1, 0, 0);
                INSERT INTO user_x_user_role (user_id, user_role_id) VALUES (1, 1);
                INSERT INTO authentication (person_id, password_sha256, username) VALUES (1, '${password_hash}', '${escaped_login}');
            </transaction>
        </pdosqlexec>
    </target>
</project>
