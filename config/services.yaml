# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    ilios_api_version: v3.7
    env(TRUSTED_PROXIES):
    env(ILIOS_REDIS_URL):
    env(ILIOS_CACHE_DECRYPTION_KEY):

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
          $environment: '%kernel.environment%'
          $kernelCacheDir: '%kernel.cache_dir%'
          $apiVersion: '%ilios_api_version%'
          $kernelProjectDir: '%kernel.project_dir%'
          $kernelSecret: '%kernel.secret%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Repository\:
        resource: '../src/Repository'
        public: true

    App\Repository\ApplicationConfigRepository:
      public: true
      arguments:
        $cacheEnabled: true

    Ilios\MeSH\Parser:

    Alchemy\Zippy\Zippy:
        factory: ['Alchemy\Zippy\Zippy', 'load']

    Doctrine\Inflector\Inflector:
      factory: ['App\Service\InflectorFactory', 'create']

    App\Command\ListConfigValuesCommand:
      arguments:
        $databaseUrl: '%env(ILIOS_DATABASE_URL)%'

    App\Controller\ExceptionController:
      public: true

    App\EventListener\LogEntityChanges:
      tags:
      - { name: doctrine.event_listener, event: onFlush }

      calls:
      - [ setContainer, ['@service_container'] ]

    App\EventListener\IndexEntityChanges:
      tags:
        - { name: doctrine.event_listener, event: postPersist }
        - { name: doctrine.event_listener, event: postUpdate }
        - { name: doctrine.event_listener, event: preRemove }

    App\EventListener\TimestampEntityChanges:
      tags:
        - { name: doctrine.event_listener, event: postPersist }
        - { name: doctrine.event_listener, event: postUpdate }
        - { name: doctrine.event_listener, event: postRemove }

    App\EventListener\ClearCachedDto:
      tags:
        - { name: doctrine.event_listener, event: onFlush }

    App\Service\Config:
      public: true

    App\Service\DataimportFileLocator:
      public: true

    App\Service\EntityRepositoryLookup:
      arguments:
        $container: '@service_container'

    App\Service\Filesystem:
      public: true

    App\Service\Directory:
      public: true

    App\Service\LoggerQueue:
      public: true
      tags:
      - { name: kernel.event_listener, event: kernel.response, method: flush }
      - { name: kernel.event_listener, event: console.terminate, method: flush }

    App\Service\Timestamper:
      tags:
      - { name: kernel.event_listener, event: kernel.response, method: flush }
      - { name: kernel.event_listener, event: console.terminate, method: flush }

    App\Service\UserMaterialFactory: ~

    App\Service\AuthenticationFactory:
      public: true

    App\Service\AuthenticationInterface:
      factory: ['@App\Service\AuthenticationFactory', createAuthenticationService]

    App\Service\CasManager:
      public: true

    App\Service\CurriculumInventory\VerificationPreviewBuilder:
      ~

    App\Service\PermissionChecker:
      public: true

    App\Service\DefaultPermissionMatrix: ~

    App\Classes\PermissionMatrixInterface: '@App\Service\DefaultPermissionMatrix'

    Symfony\Component\Serializer\SerializerInterface:
      factory:   ['App\Service\SerializerFactory', createSerializer]

    App\Service\JsonApiDataShaper:
      calls:
        - [ setNormalizer, ['@Symfony\Component\Serializer\Normalizer\NormalizerInterface'] ]

    App\Monitor\Timezone:
      autoconfigure: false
      tags:
      - { name: liip_monitor.check, group: default }

    App\Monitor\RequiredENV:
      autoconfigure: false
      tags:
      - { name: liip_monitor.check, group: default }

    App\Monitor\IliosFileSystem:
      autoconfigure: false
      tags:
      - { name: liip_monitor.check, group: production }

    App\Monitor\Frontend:
      autoconfigure: false
      tags:
      - { name: liip_monitor.check, group: production }

    App\Monitor\PhpConfiguration:
      autoconfigure: false
      tags:
      - { name: liip_monitor.check, group: production }

    App\Monitor\Composer:
      autoconfigure: false
      tags:
      - { name: liip_monitor.check, group: production }

    App\Monitor\NoDefaultSecret:
      autoconfigure: false
      tags:
        - { name: liip_monitor.check, group: default }

    League\Flysystem\FilesystemOperator:
      factory: ['@App\Service\FilesystemFactory', getFilesystem]

    Elasticsearch\Client:
      factory: ['App\Service\ElasticSearchFactory', 'getClient']
      arguments: ['@App\Service\Config']

    http_client:
      class: Symfony\Component\HttpClient\NativeHttpClient

    dynamic_cache_factory:
      class: Symfony\Component\Cache\Adapter\TagAwareAdapterInterface
      factory: [ 'App\Service\DynamicCacheFactory', 'getCache' ]
      arguments: ['namespace', '%env(resolve:ILIOS_REDIS_URL)%', '%kernel.environment%', '%kernel.cache_dir%', '%env(base64:ILIOS_CACHE_DECRYPTION_KEY)%']
